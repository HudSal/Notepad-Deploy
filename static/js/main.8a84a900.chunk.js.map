{"version":3,"sources":["services/storage.js","images/MyNote.png","images/MyNote1.png","components/header.js","pages/home.js","pages/create.js","pages/edit.js","components/router.js","components/row.js","App.js","reportWebVitals.js","index.js"],"names":["Storage","getItem","key","defaultValue","value","localStorage","JSON","parse","setItem","stringify","removeItem","SessionStorage","getSessionItem","sessionStorage","setSessionItem","removeSessionItem","Header","setNotes","history","useHistory","className","src","MyNote","alt","onClick","push","toast","success","position","autoClose","Home","notes","deleteNote","items","i","Row","index","onClickRow","onClickDeleteRow","length","renderData","Create","useState","title","setTitle","content","setContent","useEffect","placeholder","onChange","event","newTitle","target","rows","newContent","note","newListNotes","error","Edit","id","useParams","Array","from","Router","exact","path","App","new_note_array","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a84a900.chunk.js","sourcesContent":["//LOCAL STORAGE\r\nfunction getItem(key, defaultValue){\r\n    let value= localStorage.getItem(key);\r\n    if(value){\r\n        value=JSON.parse(value);\r\n        return value;\r\n    }\r\n    return defaultValue;\r\n}\r\nfunction setItem(key,value){\r\n    value= JSON.stringify(value);\r\n    localStorage.setItem(key,value);\r\n}\r\nfunction removeItem(key){\r\n    localStorage.removeItem(key);\r\n}\r\nexport const Storage={getItem,setItem,removeItem};\r\n\r\n//SessionStorage\r\nfunction getSessionItem(key,defaultValue){\r\n    let value = sessionStorage.getItem(key);\r\n    if(value){\r\n        value= JSON.parse(value);\r\n        return value;\r\n    }\r\n    return defaultValue;\r\n}\r\nfunction setSessionItem(key,value){\r\n    value = JSON.stringify(value);\r\n    sessionStorage.setItem(key,value);\r\n}\r\nfunction removeSessionItem(key){\r\n    sessionStorage.removeItem(key);\r\n}\r\nexport const SessionStorage={getSessionItem,setSessionItem,removeSessionItem};","export default __webpack_public_path__ + \"static/media/MyNote.bdfab8b0.png\";","export default __webpack_public_path__ + \"static/media/MyNote1.afad65b8.png\";","import React from 'react';\r\nimport './styles/header.css';\r\nimport {useHistory} from 'react-router-dom';\r\nimport { Storage } from '../services';\r\nimport { toast } from 'react-toastify';\r\nimport MyNote from '../images/MyNote.png';\r\nimport MyNote1 from '../images/MyNote1.png';\r\n\r\n//The header component needs to have a Title of your application & have a Clear All button to clear the list from storage\r\n\r\nexport function Header({setNotes}){\r\nconst history= useHistory();\r\n\r\n\r\nfunction onClearAllClick(){\r\n    toast.success(\"All Notes are deleted successfully.\", {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n    });\r\n    Storage.removeItem('notes');\r\n    setNotes([]);\r\n    history.push('/');\r\n}\r\n    return(\r\n        <header >\r\n            <div className=\"header-container\">\r\n            <img src={MyNote} className=\"mylogo\" alt=\"My Notes\" onClick={()=>history.push('/')} />\r\n            <h1 onClick={()=>history.push('/')}>My Notes</h1>            \r\n            <button className=\"clearAllButton\" onClick={onClearAllClick}>Clear All Notes</button>\r\n            </div>\r\n            {/* <img src={MyNote1} className=\"myNotes\" alt=\"My Notes\"/>\r\n            <img src={MyNote1} className=\"myNotes\" alt=\"My Notes\"/>\r\n            <img src={MyNote1} className=\"myNotes\" alt=\"My Notes\"/>\r\n            <img src={MyNote1} className=\"myNotes\" alt=\"My Notes\"/>\r\n            <img src={MyNote1} className=\"myNotes\" alt=\"My Notes\"/> */}\r\n        </header>\r\n    );\r\n}","//The homepage needs to display the current list of notes stored in local storage.\r\n//A note is an object with a “title” & “content” property. The list is an array of note objects.\r\n//The homepage will also need to have an Add Note button below the list to navigate the user to\r\n//the Add Note page.\r\n\r\nimport React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Row} from '../components';\r\nimport './styles/home.css';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport function Home({notes, deleteNote}){\r\n    const history= useHistory();\r\n\r\n    function renderData(){\r\n        let items = [];\r\n\t\t//loop: for forEach map\r\n\t\tfor(let i = 0; i < notes.length; i++) {\r\n\t\t\tfunction onRowDelete() {\r\n                toast.success(\" Note is deleted successfully \", {\r\n                    position: 'top-center',\r\n                    autoClose: 3000,\r\n                });\r\n\t\t\t\tdeleteNote(i);\r\n\t\t\t}\r\n            function onClickNoteRow(){\r\n                history.push(`./edit/${i}`)\r\n            }\r\n\t\t\t//  Add row number: {i+1}\r\n\t\t\titems.push(\r\n\t\t\t\t<Row\r\n\t\t\t\t\tindex={i}\r\n\t\t\t\t\tvalue={notes[i]}\r\n                    onClickRow={onClickNoteRow}\r\n\t\t\t\t\tonClickDeleteRow={onRowDelete}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn items;\r\n\r\n    }\r\n\r\n    function onClickAddNew(){\r\n        history.push('./create');\r\n    }\r\n    return(\r\n        <div className=\"home-container\">\r\n            <h1>My Note List </h1>\r\n\t\t\t<div>\r\n\t\t\t\t{renderData()}\r\n\t\t\t</div>\r\n            <br/>\r\n            <button className=\"btn-AddNewNote\" onClick={onClickAddNew}>+ Create New Note</button>\r\n        </div>\r\n        \r\n     \r\n    );\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Storage,SessionStorage} from '../services';\r\nimport { toast } from 'react-toastify';\r\nimport './styles/create.css';\r\n/**The Add Note page will need to have a form that allows a user to add a note.\r\nA note will have a ‘title’ and a ‘content’ property.\r\nTitle will be a regular input and content will be a textarea.\r\nThe form data will need to be stored using session storage.\r\nThere needs to be an Add Note button that submits the form and adds a new note using the form\r\ndata. The form data should also be cleared from session storage on click. The user should also be\r\nnavigated back to the previous page when submitting the form. */\r\n\r\nexport function Create({notes, setNotes}){\r\n    const history= useHistory();\r\n    const [title,setTitle]= useState('');\r\n    const [content,setContent]=useState(\"\");\r\n\r\n\r\n    useEffect(()=>{\r\n        setTitle(SessionStorage.getSessionItem('title',''));\r\n        setContent(SessionStorage.getSessionItem('content',''));\r\n        setNotes(Storage.getItem('notes',[]));\r\n    },[]);\r\n\r\n    function onClickCreate(){\r\n        if(title&&content){\r\n            let note={};\r\n            note.title=SessionStorage.getSessionItem('title','');\r\n            note.content=SessionStorage.getSessionItem('content','');\r\n            let newListNotes=[...notes,note];\r\n            setNotes(newListNotes);\r\n            Storage.setItem('notes',newListNotes);\r\n            SessionStorage.removeSessionItem('title');\r\n            SessionStorage.removeSessionItem('content');\r\n            toast.success('Great!! My new note is added successfully.',{\r\n                position: \"top-center\",\r\n                autoClose: 3000,\r\n            });\r\n            history.push('/');\r\n        }\r\n        else{\r\n            toast.error(\"Don't forget the Title and Content are required to create new Note\", {\r\n                position: 'top-center',\r\n                autoClose: 5000,\r\n            });\r\n        }\r\n        \r\n    }\r\n    return(\r\n        <div className='create-form'>\r\n            <h1>Let Me Add New Note</h1>\r\n            <br/>\r\n            <label>Title:</label>\r\n            <p>\r\n                <input \r\n                    className=\"title-form\"\r\n                    placeholder=\"Title\" \r\n                    value={title}\r\n                    onChange={\r\n                        (event)=>{\r\n                            let newTitle= event.target.value;\r\n                            setTitle(newTitle);\r\n                            SessionStorage.setSessionItem('title',newTitle);\r\n                        }\r\n                    }\r\n                />\r\n            </p>\r\n            <br/>\r\n            <label>Content:</label>\r\n            <p>\r\n                <textarea \r\n                    className=\"title-form\"\r\n                    placeholder=\"Content\" \r\n                    value={content}\r\n                    rows={10}\r\n                    onChange={\r\n                        (event)=>{\r\n                            let newContent= event.target.value;\r\n                            setContent(newContent);\r\n                            SessionStorage.setSessionItem('content',newContent);\r\n                        }\r\n                    }\r\n                />\r\n            </p>\r\n            <button className=\"btn-CreateNewNote\" onClick={onClickCreate}>Create New Note</button>\r\n        </div>\r\n    );\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {Storage,SessionStorage} from '../services';\r\nimport { toast } from 'react-toastify';\r\nimport './styles/edit.css';\r\n\r\n/**The Edit Note page will need to have a form that allows a user to edit a note.\r\nThe user can edit the ‘title’ and ‘content’ property of a note.\r\nThere needs to be a Save Note button that submits the form and updates the note. The user\r\nshould also be navigated back to the previous page when submitting the form. */\r\n\r\nexport function Edit({notes,setNotes}){\r\n \r\n    const {id}=useParams();\r\n    const history= useHistory();\r\n    const [title,setTitle]= useState('');\r\n    const [content,setContent]=useState('');\r\n\r\n    useEffect(()=>{\r\n        setTitle(SessionStorage.getSessionItem('title',notes[id].title));\r\n        setContent(SessionStorage.getSessionItem('content',notes[id].content));\r\n        setNotes(Storage.getItem('notes',[]));\r\n    },[]);\r\n\r\n   \r\n\r\n    function onClickSave(){\r\n        let newListNotes=Array.from(notes);\r\n        let note=newListNotes[id];\r\n        note.title=title;\r\n        note.content=content;\r\n        setNotes(newListNotes);\r\n        Storage.setItem('notes',newListNotes);\r\n        SessionStorage.removeSessionItem('title');\r\n        SessionStorage.removeSessionItem('content');\r\n        toast.success('My note is updated successfully.',{\r\n            position: \"top-center\",\r\n            autoClose: 3000,\r\n        });\r\n        history.push('/');\r\n    }\r\n    return(\r\n        <div className=\"edit-form\">\r\n            <h1>Let Me Edit This Note</h1>\r\n            <br/>\r\n            <label>Title:</label>\r\n            <p>\r\n                <input \r\n                    className=\"title-form\"\r\n                    placeholder=\"Title\"\r\n                    value={title}\r\n                    onChange={\r\n                        (event)=>{\r\n                            let newTitle= event.target.value;\r\n                            setTitle(newTitle);\r\n                            SessionStorage.setSessionItem('title',newTitle);\r\n                        }\r\n                    }\r\n                />\r\n            </p>\r\n            <br/>\r\n            <label>Content:</label>\r\n            <p>\r\n                <textarea \r\n                    className=\"title-form\"\r\n                    placeholder=\"Content\" \r\n                    value={content}\r\n                    rows={10}\r\n                    onChange={\r\n                        (event)=>{\r\n                            let newContent= event.target.value;\r\n                            setContent(newContent);\r\n                            SessionStorage.setSessionItem('content',newContent);\r\n                        }\r\n                    }\r\n                />\r\n            </p>\r\n            <button className=\"btn-CreateNewNote\" onClick={onClickSave}>Save Changes</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Route,Switch} from 'react-router-dom';\r\nimport {Edit, Home, Create} from '../pages'\r\n\r\nexport function Router({notes, setNotes,deleteNote}){\r\n    return(\r\n        <Switch>\r\n            <Route exact path=\"/\"><Home notes={notes} deleteNote={deleteNote}/></Route>\r\n            {/* <Route exact path=\"/Notepad-Deploy/\"><Home notes={notes} deleteNote={deleteNote}/></Route> */}\r\n            <Route exact path=\"/create\"><Create notes={notes} setNotes={setNotes} /></Route>\r\n            <Route exact path=\"/edit/:id\"><Edit notes={notes} setNotes={setNotes} /></Route>\r\n            {/* <Route>404 not found. This page not exist.</Route> */}\r\n        </Switch>\r\n    );\r\n}","import React from 'react';\r\nimport './styles/row.css';\r\n\r\n\r\n/**Create a functional component called Row.\r\nEach row in the list on the homepage needs to use a Row component to display the note title and\r\na delete button.\r\nWhen delete is clicked the current note is removed from the list of notes.\r\nWhen a row is clicked the user is sent to the Edit Note page. */\r\n\r\nexport function Row({onClickDeleteRow,value,index,onClickRow}){\r\n\r\n\r\n    return(\r\n        <div className=\"row-container\"> \r\n            <div key={\"name\" + index} className=\"row-notelist\" >\r\n                {index + 1}. <span  onClick={onClickRow}>{value.title}:</span> <span onClick={onClickRow}>{value.content}</span>\r\n                <button className=\"btn-DleteOneNote\" onClick={onClickDeleteRow}>Delete This Note</button>  \r\n\t\t    </div>   \r\n                  \r\n        </div>\r\n    );\r\n}","import './App.css';\nimport React,{useEffect, useState} from 'react';\nimport {Header,Router} from './components';\nimport {Storage} from './services';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport MyNote1 from '../src/images/MyNote1.png';\n\nfunction App() {\n  const [notes,setNotes]= useState([]);\n  const [title,setTitle]= useState('');\n  const [content,setContent]=useState(\"\");\n  useEffect(()=>{\n    setNotes(Storage.getItem('notes',[{title:title,content:content}]));\n  },[]);\n\n  function deleteOneNote(index){\n    let new_note_array = Array.from(notes);\n\t\tnew_note_array.splice(index, 1);\n    Storage.setItem('notes',new_note_array)\n\t\tsetNotes(new_note_array);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header notes={notes} setNotes={setNotes} />\n      <Router notes={notes} setNotes={setNotes} deleteNote={deleteOneNote} />\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}